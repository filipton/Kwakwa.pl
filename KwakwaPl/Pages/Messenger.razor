@page "/messenger"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
@inject IHttpContextAccessor HttpContextAccessor

@using KwakwaPl.Data
@using Microsoft.AspNetCore.Components.Web
@using System.Text.Json

@if (CurrentUserName == null)
{
    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" style="width: 100%;">
            <DataAnnotationsValidator />

            <div class="d-flex align-items-center justify-content-center">
                <div class="d-flex flex-column">
                    <input type="text" class="p-2 form-control" placeholder="Enter Nickname" aria-label="Enter Nickname" aria-describedby="basic-addon2" @bind-value="loginModel.UserName" style="width: 100%;">
                    <button type="submit" class="p-2 btn btn-primary" style="width: 100%;"><b>SET NICKNAME</b></button>
                </div>
            </div>
    </EditForm>
}
else if(CurrentGroup < 0)
{
    for (int i = 0; i < groups.Count; i++)
    {
        int t = i;
        <button @onclick="() => SelectGroup(t)">@t</button>
    }
}

<div style="@((CurrentUserName == null || CurrentGroup < 0) ? "visibility: hidden;" : "")">
    <div @ref="dropZoneElement" class="drop-zone input-group mb-3">
          <EditForm Model="@messageBoxModel" OnValidSubmit="@HandleValidSubmit" style="width: 100%;">
            <DataAnnotationsValidator />

            <div class="form-group d-flex justify-content-between">
                <input type="text" class="form-control" placeholder="Type message here..." aria-label="Type message here..." aria-describedby="basic-addon2" @bind-value="messageBoxModel.Message" style="width: 100%;">
                <button type="button" class="btn btn-primary" onclick="document.getElementById('inputImg').click()"><i class="oi oi-data-transfer-upload"></i></button>
                <button type="submit" class="btn btn-primary"><span class="oi oi-arrow-circle-right"></span></button>
            </div>
         </EditForm>
    </div>

    <div id="messages">
        @if (CurrentGroup >= 0 && groups[CurrentGroup].Messages.Count > 0)
        {
            for(int m = groups[CurrentGroup].Messages.Count - 1; m > 0; m++)
            {
                Message umsg = groups[CurrentGroup].Messages[m];
                if (umsg.Msg.Contains("https://i.imgur.com/"))
                {
                    <span><b>[@umsg.Time] @(umsg.UserName):</b></span><br />
                    <a href="@(umsg.Msg)" target="_blank">
                        <img style="max-width: 50%; max-height: 50%;" src="@(umsg.Msg)" /><br />
                    </a>
                }
                else if (IsValidUrl(umsg.Msg))
                {
                    <span><b>[@umsg.Time] @(umsg.UserName):</b></span> <a href="@(umsg.Msg)">@(umsg.Msg)</a><br />
                }
                else if (umsg.Msg == "DUCK")
                {
                    <span><b>[@umsg.Time] @(umsg.UserName):</b></span><br />
                    <img style="max-width: 75px; max-height: 75px;" src="/favicon.ico" /><br />
                }
                else
                {
                    <span><b>[@umsg.Time] @(umsg.UserName):</b> @(umsg.Msg)</span><br />
                }
            }
        }
    </div>
</div>


<InputFile id="inputImg" OnChange="@OnChange" @ref="inputImage" style="display:none;" accept=".gif,.jpg,.jpeg,.png" /> 

@code {
    //https://www.meziantou.net/upload-files-with-drag-drop-or-paste-from-clipboard-in-blazor.htm

    ElementReference dropZoneElement;
    InputFile inputImage;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;

    private MessageBoxModel messageBoxModel = new();
    private LoginModel loginModel = new();

    public static List<MessageGroup> groups = new List<MessageGroup>();
    public static List<Messenger> Instances = new List<Messenger>();

    public string CurrentUserName;
    public int CurrentGroup = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./dropZone.js");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputImage.Element);
        }
    }

    async Task OnChange(InputFileChangeEventArgs e)
    {
        //FILE EXT: .png, .jpg, .jpeg, .gif only allowed
        if (!(e.File.Name.Contains(".png") || e.File.Name.Contains(".jpg") || e.File.Name.Contains(".jpeg") || e.File.Name.Contains(".gif")))
        {
            return;
        }

        var handler = new HttpClientHandler();
        handler.UseCookies = false;

        using (var httpClient = new HttpClient(handler))
        {
            using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api.imgur.com/3/image/"))
            {
                request.Headers.TryAddWithoutValidation("Authorization", "Client-ID " + "ab7574ecd2ff88c");

                request.Content = new StreamContent(e.File.OpenReadStream(10485760));
                var response = await httpClient.SendAsync(request);
                ImgurJSON? imgJson = await JsonSerializer.DeserializeAsync<ImgurJSON>(await response.Content.ReadAsStreamAsync());
                //imgSrc = imgJson.data.link;
                AddMessage(CurrentGroup, CurrentUserName, imgJson.data.link);
            }
        }
    }

    void SelectGroup(int gId)
    {
        CurrentGroup = gId;
        Console.WriteLine(CurrentGroup);

        InvokeAsync(StateHasChanged);
    }

    private void HandleValidSubmit()
    {
        AddMessage(CurrentGroup, CurrentUserName, messageBoxModel.Message);

        messageBoxModel.Message = "";

        InvokeAsync(StateHasChanged);
    }
    private void HandleLogin()
    {
        CurrentUserName = loginModel.UserName;

        InvokeAsync(() =>
        {
            StateHasChanged();
            WriteCookieAsync("nick", CurrentUserName, 365);
        });
    }

    public static void AddMessage(int group, string username, string msg)
    {
        groups[group].AddMessage(username, msg);

        foreach (Messenger messenger in Instances)
        {
            messenger.Refresh();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if(groups.Count == 0)
        {
            groups.Add(new MessageGroup() { GroupName = "Global", Messages = new List<Message>() });
        }

        Instances.Add(this);
        CurrentUserName = HttpContextAccessor.HttpContext.Request.Cookies["nick"];
        //CurrentUserName = $"Duck-{new Random().Next(0, 10000)}";
    }

    public async Task WriteCookieAsync(string name, string value, int days)
    {
        var test = await JSRuntime.InvokeAsync<object>("blazorExtensions.WriteCookie", name, value, days);
    }

    public async ValueTask DisposeAsync()
    {
        Instances.Remove(this);
    }

    public void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    public static bool IsValidUrl(string url)
    {
        Uri uriResult;
        bool result = Uri.TryCreate(url, UriKind.Absolute, out uriResult) && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
        return result;
    }
}