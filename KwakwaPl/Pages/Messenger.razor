@page "/messenger/{gid:int}"
@inject IJSRuntime _jsRuntime
@inject IHttpContextAccessor _httpContextAccessor
@inject NavigationManager _navManager
@inject UserState _userState
@implements IAsyncDisposable

@using KwakwaPl.Data
@using System.Text.Json
@using System.Text.RegularExpressions
@using KwakwaPl.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Http

<div @ref="_dropZoneElement" class="drop-zone">
    <h1>@MessagesContainer.Groups[Gid].GroupName: </h1>

    @if (!_userState.IsLoggedIn)
    {
        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" style="width: 100%;">
            <DataAnnotationsValidator/>

            <div class="d-flex align-items-center justify-content-center">
                <div class="d-flex flex-column">
                    <input type="text" class="p-2 form-control" placeholder="Enter Nickname" aria-label="Enter Nickname" aria-describedby="basic-addon2" @bind-value="loginModel.UserName" style="width: 100%;">
                    <button type="submit" class="p-2 btn btn-primary" style="width: 100%;"><b>SET NICKNAME</b></button>
                </div>
            </div>
        </EditForm>
    }
    else if (!_userState.IsAuthorizedToGroup(Gid))
    {
        <EditForm Model="@passwordModel" OnValidSubmit="@HandleGroupPassword" style="width: 100%;">
            <DataAnnotationsValidator/>

            <div class="d-flex align-items-center justify-content-center">
                <div class="d-flex flex-column">
                    <input type="text" class="p-2 form-control" placeholder="Enter Password" aria-label="Enter Password" aria-describedby="basic-addon2" @bind-value="passwordModel.Password" style="width: 100%;">
                    <button type="submit" class="p-2 btn btn-primary" style="width: 100%;"><b>ENTER PASSWORD</b></button>
                </div>
            </div>
        </EditForm>
    }

    @if (_userState.IsLoggedIn && _userState.IsAuthorizedToGroup(Gid))
    {
        <div>
            <div class="input-group mb-3">
                <EditForm Model="@messageBoxModel" OnValidSubmit="@HandleMessage" style="width: 100%;">
                    <DataAnnotationsValidator/>

                    <div class="form-group d-flex justify-content-between">
                        <input type="text" class="form-control" placeholder="Type message here..." aria-label="Type message here..." aria-describedby="basic-addon2" @bind-value="messageBoxModel.Message" style="width: 100%;">
                        <button type="button" class="btn btn-primary" onclick="document.getElementById('inputImg').click()"><i class="oi oi-data-transfer-upload"></i></button>
                        <button type="submit" class="btn btn-primary"><span class="oi oi-arrow-circle-right"></span></button>
                    </div>
                </EditForm>
            </div>

            <div class="text-break" id="messages">
                @foreach (Message umsg in MessagesContainer.Groups[Gid].GetMessages().Result.Reverse<Message>())
                {
                    if (umsg.Msg.Contains("https://i.imgur.com/"))
                    {
                        <span><b>[@umsg.Time] @(umsg.User):</b></span><br/>
                        <a href="@(umsg.Msg)" target="_blank">
                            <img alt="Loading image..." style="max-width: 50%; max-height: 50%;" src="@(umsg.Msg)"/><br/>
                        </a>
                    }
                    else if (IsValidUrl(umsg.Msg))
                    {
                        <span><b>[@umsg.Time] @(umsg.User):</b></span>
                        <a href="@(umsg.Msg)">@(umsg.Msg)</a><br/>
                    }
                    else if (umsg.Msg == "DUCK")
                    {
                        <span><b>[@umsg.Time] @(umsg.User):</b></span><br/>
                        <img alt="DUCK" style="max-width: 75px; max-height: 75px;" src="/favicon.ico"/><br/>
                    }
                    else
                    {
                        <span><b>[@umsg.Time] @(umsg.User):</b> @(umsg.Msg)</span><br/>
                    }
                }
            </div>
        </div>
    }


    <InputFile id="inputImg" OnChange="@OnChange" @ref="inputImage" style="display:none;" accept=".gif,.jpg,.jpeg,.png"/>
</div>

@code {

    [Parameter]
    public int Gid { get; set; }

    //https://www.meziantou.net/upload-files-with-drag-drop-or-paste-from-clipboard-in-blazor.htm
    ElementReference _dropZoneElement;
    InputFile inputImage;

    IJSObjectReference? _module;
    IJSObjectReference? _dropZoneInstance;

    private MessageBoxModel messageBoxModel = new();
    private LoginModel loginModel = new();
    private PasswordModel passwordModel = new();

    public static List<Messenger> Instances = new List<Messenger>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./dropZone.js");
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", _dropZoneElement, inputImage.Element);
        }
    }

    //On Image Upload
    public async Task OnChange(InputFileChangeEventArgs e)
    {
        if (!_userState.IsLoggedIn || !_userState.IsAuthorizedToGroup(Gid)) return;;
        
        //FILE EXT: .png, .jpg, .jpeg, .gif only allowed
        if (!(e.File.Name.Contains(".png") || e.File.Name.Contains(".jpg") || e.File.Name.Contains(".jpeg") || e.File.Name.Contains(".gif"))) return;

            var handler = new HttpClientHandler();
        handler.UseCookies = false;

        using (var httpClient = new HttpClient(handler))
        {
            using (var request = new HttpRequestMessage(new HttpMethod("POST"), "https://api.imgur.com/3/image/"))
            {
                request.Headers.TryAddWithoutValidation("Authorization", "Client-ID " + "ab7574ecd2ff88c");

                request.Content = new StreamContent(e.File.OpenReadStream(10485760));
                var response = await httpClient.SendAsync(request);
                ImgurJSON? imgJson = await JsonSerializer.DeserializeAsync<ImgurJSON>(await response.Content.ReadAsStreamAsync());
                await AddMessage(imgJson.data.link);
            }
        }
    }

    public async Task AddMessage(string msg)
    {
        await MessagesContainer.Groups[Gid].AddMessage(_userState.UserName, msg);

        foreach (Messenger messenger in Instances)
        {
            messenger.Refresh();
        }
    }
    
    #region InputHandlers
    //Message Handler
    private async Task HandleMessage()
    {
        await AddMessage(messageBoxModel.Message);
        messageBoxModel.Message = "";

        InvokeAsync(StateHasChanged);
    }
    
    //Login Handler (Set Nickname)
    private async Task HandleLogin()
    {
        _userState.UserName = loginModel.UserName;
        if (!string.IsNullOrWhiteSpace(_userState.UserName))
        {
            _userState.IsLoggedIn = true;
            await WriteCookieAsync("nick", _userState.UserName, 365);
        }
        StateHasChanged();
    }
    
    //Password Handler
    private async Task HandleGroupPassword()
    {
        if (MessagesContainer.Groups[Gid].Password == passwordModel.Password)
        {
            _userState.GroupPasswords[Gid] = passwordModel.Password;
            if(!MessagesContainer.Groups[Gid].OneTimePassword) await WriteCookieAsync($"gp-{Gid}", passwordModel.Password, 365);
            StateHasChanged();   
        }
    }
    #endregion

    #region OnInitialized and OnDispose
    protected override async Task OnInitializedAsync()
    {
        Gid = MessagesContainer.Groups.FindIndex(x => x.Id == Gid);
        
        Instances.Add(this);

        if (!_userState.IsLoggedIn)
        {
            _userState.UserName = _httpContextAccessor.HttpContext.Request.Cookies["nick"];
            foreach (var cookie in _httpContextAccessor.HttpContext.Request.Cookies)
            {
                if (cookie.Key.StartsWith("gp-"))
                {
                    int gpid = int.Parse(cookie.Key.Replace("gp-", ""));
                    if (!_userState.GroupPasswords.ContainsKey(gpid)) _userState.GroupPasswords[gpid] = cookie.Value;
                }
            }
        }

        if (!string.IsNullOrWhiteSpace(_userState.UserName)) _userState.IsLoggedIn = true;
    }
    public async ValueTask DisposeAsync()
    {
        Instances.Remove(this);
    }
    #endregion

    //USEFUL STUFF
    public void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }
    
    public async Task WriteCookieAsync(string name, string value, int days)
    {
        var test = await _jsRuntime.InvokeAsync<object>("blazorExtensions.WriteCookie", name, value, days);
    }
    public bool IsValidUrl(string url)
    {
        bool result = Uri.TryCreate(url, UriKind.Absolute, out Uri? uriResult) && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
        return result;
    }
}